name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, dom, fileinfo, pgsql, zip, gd, curl, xml, bcmath, intl, soap, imagick
        coverage: none

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader
      env:
        COMPOSER_ALLOW_SUPERUSER: 1

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install Node dependencies and build assets
      run: |
        bun install
        bun run build

    - name: Prepare Laravel environment
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate --ansi
        chmod -R 755 storage bootstrap/cache

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        timeout: 60s
        command_timeout: 15m
        script: |
          echo "‚úÖ SSH connection successful!"
          echo "User: $(whoami)"
          echo "Host: $(hostname)"
          echo "Date: $(date)"
          echo "Working directory: $(pwd)"
          
          # Check if update script exists and is executable
          if [ -f "/opt/deployment/update.sh" ]; then
            echo "‚úÖ Update script found"
            ls -la /opt/deployment/update.sh
          else
            echo "‚ùå Update script not found"
            exit 1
          fi
          
          # Test script execution
          echo "üöÄ Running update script..."
          /opt/deployment/update.sh "${{ secrets.PROJECT_PATH }}" main

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful"
        else
          echo "‚ùå Deployment failed"
        fi

    - name: Create deployment notification
      if: success()
      run: |
        echo "üöÄ Deployment Summary:"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Time: $(date '+%Y-%m-%d %H:%M:%S')"
